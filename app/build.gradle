/*
 * Copyright (c) 2016. Saiy Ltd. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
plugins {
    alias(libs.plugins.androidApplication)
    alias(libs.plugins.protobuf.gradle.plugin)
    alias(libs.plugins.hilt)
    alias(libs.plugins.googleServices)
}

android {
    namespace 'ai.saiy.android'
    //noinspection GradleDependency: For android.service.voice.AlwaysOnHotwordDetector
    compileSdk 30

    defaultConfig {
        applicationId "ai.saiy.android"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 3
        versionName "1.0.3"
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
        // Required when setting minSdkVersion to 20 or lower
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled = true // <- this flag is required
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        incremental true
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        buildConfig = true
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/INDEX.LIST'
    }
}

configurations {
    implementation.exclude group: "org.apache.httpcomponents", module: "httpclient"
}

dependencies {
    implementation fileTree(include: ['*.aar', '*.jar', '*.so'], dir: 'libs')
    implementation libs.multidex
    coreLibraryDesugaring libs.desugar.jdk.libs

    implementation libs.material
    implementation libs.appcompat
    implementation(libs.activity) {
        exclude group: 'androidx.activity', module: 'activity-ktx'
    }
    implementation libs.annotation
    implementation libs.browser
    implementation libs.cardview
    implementation libs.constraintlayout
    implementation (libs.core) {
        exclude group: 'androidx.core', module: 'core-ktx'
    }
    implementation libs.documentfile
    implementation libs.drawerlayout
    implementation(libs.fragment) {
        exclude group: 'androidx.fragment', module: 'fragment-ktx'
    }
    implementation(libs.lifecycle.runtime) {
        exclude group: 'androidx.lifecycle', module: 'lifecycle-runtime-ktx'
    }
    implementation(libs.lifecycle.livedata) {
        exclude group: 'androidx.lifecycle', module: 'lifecycle-livedata-core-ktx'
    }
    implementation(libs.lifecycle.viewmodel) {
        exclude group: 'androidx.lifecycle', module: 'lifecycle-viewmodel-ktx'
    }
    implementation libs.lifecycle.viewmodel.savedstate
    annotationProcessor libs.common.java8
    implementation libs.recyclerview
    implementation libs.print
    implementation libs.transition
    implementation libs.work.runtime
    implementation(libs.hilt.android) {
        exclude group: 'androidx.fragment', module: 'fragment'
        exclude group: 'androidx.fragment', module: 'fragment-ktx'
        exclude group: 'androidx.activity', module: 'activity'
        exclude group: 'androidx.activity', module: 'activity-ktx'
    }

    implementation(libs.google.google.api.services.translate) {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'com.google.guava'
    }
    implementation libs.play.services.location
    implementation libs.play.services.auth
    implementation libs.play.services.ads.identifier
    implementation libs.play.services.ads
    implementation libs.play.services.wearable
    implementation libs.speechkit
    implementation libs.guava
    implementation libs.gson
    implementation libs.google.http.client.gson
    implementation libs.speechrecognition
    implementation libs.billing
    implementation libs.commons.lang3
    implementation libs.commons.codec
    implementation libs.commons.collections4
    implementation libs.commons.io
    implementation libs.commons.fileupload
    implementation libs.commons.text
    implementation libs.simmetrics.core
    implementation platform(libs.libraries.bom)
    // https://github.com/dialogflow/dialogflow-android-client
    // https://github.com/googleapis/google-cloud-java/tree/main/java-dialogflow
    implementation (libs.cloud.dialogflow) {
        //noinspection DuplicatePlatformClasses, it's OK to be excluded
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'io.grpc', module: 'grpc-protobuf'
        exclude group: 'com.google.protobuf', module: 'protobuf-java-lite'
//        exclude group: 'com.google.protobuf', module: 'protobuf-java'
//        exclude group: 'com.google.protobuf', module: 'protobuf-java-util'
    }
    implementation libs.proto.google.common
    // Add the dependency for the Firebase Authentication library
    implementation(platform(libs.firebase.bom)) {
        exclude group: 'com.google.firebase', module: 'firebase-common-ktx'
    }
    implementation(libs.firebase.appcheck) {
        exclude group: 'com.google.firebase', module: 'firebase-common-ktx'
    }
    implementation(libs.firebase.appcheck.playintegrity) {
        exclude group: 'com.google.firebase', module: 'firebase-appcheck'
        exclude group: 'com.google.firebase', module: 'firebase-common-ktx'
    }
    implementation libs.firebase.analytics
    implementation(libs.firebase.auth) {
        exclude group: 'com.google.firebase', module: 'firebase-auth-ktx'
    }
    implementation(libs.firebase.functions) {
        exclude group: 'com.google.firebase', module: 'firebase-common-ktx'
    }
    implementation libs.firebase.messaging
    implementation libs.firebase.database
    implementation libs.firebase.ui.auth
    // https://github.com/TooTallNate/Java-WebSocket
    implementation libs.java.web.socket
    implementation libs.licensesdialog
    implementation(libs.simple.xml) {
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
    }
    implementation(libs.grpc.okhttp) {
        exclude module: 'jsr305'
    }
    implementation(libs.grpc.protobuf) {
        exclude module: 'jsr305'
    }
    implementation(libs.grpc.stub) {
        exclude module: 'jsr305'
    }
    implementation(libs.grpc.auth) {
        exclude module: 'jsr305'
    }
    implementation(libs.protobuf.java)
    implementation(libs.protobuf.java.util)
    implementation(libs.javax.annotation.api) {
        exclude module: 'annotation'
    }
    // https://github.com/googleapis/google-auth-library-java
    implementation(libs.google.auth.library.oauth2.http) {
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'com.google.guava'
        exclude module: 'jsr305'
        exclude module: 'httpclient'
    }
    implementation (libs.volley)
    implementation (libs.java.aes.crypto)
    implementation (libs.twitter4j)
    implementation (libs.facebook.login) {
        exclude group: 'androidx.core', module: 'core-ktx'
    }
    implementation (libs.facebook.share) {
        exclude group: 'androidx.core', module: 'core-ktx'
    }
    // https://github.com/cmusphinx/pocketsphinx-android
    implementation project(':pocketsphinx-android-5prealpha-nolib')
    implementation project(':ToastCompat')
    implementation project(':StandOut')

    annotationProcessor libs.hilt.compiler
    testImplementation libs.junit
    androidTestImplementation libs.junit
    androidTestImplementation libs.ext.junit
}

// https://github.com/google/protobuf-gradle-plugin
// https://github.com/grpc/grpc-java
protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.25.3'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.64.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {}
            }
            task.plugins {
                grpc {}
            }
        }
    }
}

ant.importBuild('assets.xml')
preBuild.dependsOn(list, checksum)
clean.dependsOn(clean_assets)
